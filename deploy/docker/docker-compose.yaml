services:
  postgres:
    container_name: postgresql
    image: postgres:14
    environment:
      POSTGRES_USER: razorquake
      POSTGRES_PASSWORD: razorquake
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
      - ./init-multi-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d postgres" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s
    networks:
      - backend
    restart: unless-stopped
  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - backend
    restart: unless-stopped
#  rabbitmq:
#    container_name: rabbitmq_container
#    image: rabbitmq:4-management
#    environment:
#      RABBITMQ_DEFAULT_USER: guest
#      RABBITMQ_DEFAULT_PASS: guest
#    ports:
#      - "5672:5672"
#      - "15672:15672"
#    networks:
#      - backend
#    restart: unless-stopped
  redis:
    container_name: redis
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - backend
    restart: unless-stopped

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:7.5.0
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:7.5.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:26.3.2
    ports:
      - "8443:8080"
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
    command: [ "start-dev", "--import-realm" ]
    volumes:
      - ./../../keycloak/keycloak-backup/realm-export.json:/opt/keycloak/data/import/realm-export.json:ro
    networks:
      - backend

  config-server:
    build: ./../../config-server
    container_name: config-server
    ports:
      - "8888:8888"
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://localhost:8888/actuator/health" ]
      interval: 20s
      timeout: 5s
      retries: 5
    env_file:
      - ./../../config-server/.env
    volumes:
      - ./../../config-server/src/main/resources/config:/config

  eureka-server:
    build: ./../../eureka-server
    container_name: eureka-server
    ports:
      - "8761:8761"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:8761/actuator/health"]
      interval: 20s
      timeout: 5s
      retries: 5

  api-gateway:
    build: ./../../gateway
    container_name: gateway
    ports:
      - "8080:8080"
    networks:
      - backend
    depends_on:
      mongodb:
        condition: service_started
      redis:
        condition: service_started
      keycloak:
        condition: service_started
      postgres:
        condition: service_started
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker

  notification:
    build: ./../../notification
    container_name: notification-service
    ports:
      - "8084:8084"
    networks:
      - backend
    env_file:
      - ./../../notification/.env

  order:
    build: ./../../order
    container_name: order-service
    ports:
      - "8083:8083"
    networks:
      - backend
    env_file:
      - ./../../order/.env
    depends_on:
      postgres:
        condition: service_healthy
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy

  product:
    build: ./../../product
    container_name: product-service
    ports:
      - "8081:8081"
    networks:
      - backend
    env_file:
      - ./../../product/.env
    depends_on:
      postgres:
        condition: service_healthy
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy

  user:
    build: ./../../user
    container_name: user-service
    ports:
      - "8082:8082"
    networks:
      - backend
    env_file:
      - ./../../user/.env
    depends_on:
      mongodb:
        condition: service_started
      redis:
        condition: service_started
      keycloak:
        condition: service_started
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy


  mongodb:
    image: mongodb/mongodb-community-server:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    networks:
      - backend



networks:
  backend:
    driver: bridge

volumes:
  postgres:
  pgadmin: